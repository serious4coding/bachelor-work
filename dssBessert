#Doppelte geglÃ¤ttete Stochastik nach Bessert

SP500 <- read.table("~/Dropbox/Uni/BachelorArbeit/Data/SP500.csv", sep = ";", header = TRUE)
DAX <- read.table("~/Dropbox/Uni/BachelorArbeit/Data/DAX.csv", sep = ";", header = TRUE)
NIKKEI <- read.table("~/Dropbox/Uni/BachelorArbeit/Data/NIKKEI225.csv", sep = ";", header = TRUE)

index <- xts(DAX[,3:5], order.by=as.Date(DAX[,1]))

Stochastik <- function (HLC, nFastK = 14, nFastD = 3, nSlowD = 3, maType, bounded = TRUE, 
                   smooth = 1, ...)
  
{
  HLC <- try.xts(HLC, error = as.matrix)
  if (NCOL(HLC) == 3) {
    high <- HLC[, 1]
    low <- HLC[, 2]
    close <- HLC[, 3]
  }
  else if (NCOL(HLC) == 1) {
    high <- HLC
    low <- HLC
    close <- HLC
  }
  else stop("Price series must be either High-Low-Close, or Close")
  if (bounded) {
    hmax <- runMax(high, nFastK)
    lmin <- runMin(low, nFastK)
  }
  else {
    hmax <- runMax(c(high[1], high[-NROW(HLC)]), nFastK)
    lmin <- runMax(c(low[1], low[-NROW(HLC)]), nFastK)
  }
  num <- close - lmin
  den <- hmax - lmin
  if (missing(maType)) {
    maType <- "SMA"
  }
  if (is.list(maType)) {
    maTypeInfo <- sapply(maType, is.list)
    if (!(all(maTypeInfo) && length(maTypeInfo) == 3)) {
      stop("If 'maType' is a list, you must specify\n ", 
           "*three* MAs (see Examples section of ?stochastics)")
    }
    if (!is.null(formals(maType[[1]][[1]])$n) && is.null(maType[[1]]$n)) {
      maType[[1]]$n <- nFastD
    }
    if (!is.null(formals(maType[[2]][[1]])$n) && is.null(maType[[2]]$n)) {
      maType[[2]]$n <- nSlowD
    }
    if (!is.null(formals(maType[[3]][[1]])$n) && is.null(maType[[3]]$n)) {
      maType[[3]]$n <- smooth
    }
    numMA <- do.call(maType[[3]][[1]], c(list(num), maType[[3]][-1]))
    denMA <- do.call(maType[[3]][[1]], c(list(den), maType[[3]][-1]))
    fastK <- numMA/denMA
    fastK[is.nan(fastK)] <- 0.5
    fastD <- do.call(maType[[1]][[1]], c(list(fastK), maType[[1]][-1]))
    slowD <- do.call(maType[[2]][[1]], c(list(fastD), maType[[2]][-1]))
  }
  else {
    numMA <- do.call(maType, c(list(num), list(n = smooth)))
    denMA <- do.call(maType, c(list(den), list(n = smooth)))
    fastK <- numMA/denMA
    fastK[is.nan(fastK)] <- 0.5
    fastD <- do.call(maType, c(list(fastK), list(n = nFastD, ...)))
   slowD <- do.call(maType, c(list(fastD), list(n = nSlowD, ...)))
  }
  result <- cbind(fastK, fastD, slowD)
  colnames(result) <- c("fastK", "fastD", "slowD")
  reclass(result, HLC)
}

temp <- Stochastik(index, maType = "SMA")

DSSBessert <-Stochastik(temp, maType = "SMA")

